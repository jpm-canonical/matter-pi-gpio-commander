name: matter-pi-gpio-commander
version: "2.0.0"
summary: Raspberry Pi GPIO as a Matter lighting app
description: Refer to https://snapcraft.io/matter-pi-gpio-commander

# Apart from libgpiod (LGPL-2.1-or-later), everything else has Apache-2.0 license
license: Apache-2.0 AND LGPL-2.1-or-later

grade: stable
confinement: strict

base: core22
architectures:
  - build-on: arm64
  - build-on: amd64

slots:
  custom-gpio-dev:
    interface: custom-device
    custom-device: gpiochip
    devices:
      # Legacy Raspberry Pis
      - /dev/gpiochip0
      # Raspberry Pi 5
      - /dev/gpiochip4
    files:
      read:
        - /sys/devices/platform/soc/*.gpio/gpiochip0/dev
        - /sys/devices/platform/axi/*.pcie/*.gpio/gpiochip4/dev

plugs:
  # This is to communicate with the OpenThread Border Router snap (https://snapcraft.io/openthread-border-router)
  # when enabling Thread on this application.
  otbr-dbus-wpan0:
    interface: dbus
    bus: system
    name: io.openthread.BorderRouter.wpan0

  custom-gpio:
    interface: custom-device
    custom-device: gpiochip

layout:
  /mnt:
    bind: $SNAP_COMMON/mnt

parts:
  libgpiod:
    # NOTE: The deb package libgpiod2 is not being used anymore because
    # the ARM64 Runner on GH needs the library in it's API v2 form. 
    # Refer to https://github.com/canonical/matter-pi-gpio-commander/issues/53
    plugin: nil
    source: git://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git
    source-branch: v2.1
    override-build: |

      mkdir -p $CRAFT_PART_INSTALL/usr/
      ./autogen.sh --prefix=$CRAFT_PART_INSTALL/usr --enable-bindings-cxx
      make install -j$(nproc)

      cp include/gpiod.h $CRAFT_STAGE/gpiod.h
      
      mkdir -p /usr/lib/aarch64-linux-gnu
      cd $CRAFT_PART_INSTALL/usr/lib
      rm *.a *.la

      if [[ $SNAP_ARCH == "arm64" ]]; then
        cp $CRAFT_PART_INSTALL/usr/lib/libgpiod.so* /usr/lib/aarch64-linux-gnu
      fi

      if [[ $SNAP_ARCH == "amd64" ]]; then
        cp $CRAFT_PART_INSTALL/usr/lib/libgpiod.so* /usr/lib/x86_64-linux-gnu
      fi

      # Install in the system for all parts
      cp $CRAFT_PART_INSTALL/usr/include/gpiod.* /usr/include/


    build-packages:
      - g++
      - gcc
      - git
      - autoconf
      - automake
      - pkg-config
      - autoconf-archive
      - libtool
      - make

  test-blink:
    after: [libgpiod]
    plugin: nil
    source: .
    override-build: |

      g++ -Wall test-blink.cpp -lgpiod -o test-blink

      mkdir -p $CRAFT_PART_INSTALL/bin
      cp test-blink $CRAFT_PART_INSTALL/bin/

    build-packages:
      - g++
      - gcc
      - libgpiod-dev
      - tree
  
  connectedhomeip:
    plugin: nil
    source: https://github.com/project-chip/connectedhomeip.git
    source-depth: 1
    source-tag: master
    source-submodules: []
    override-pull: |

      craftctl default
      # shallow clone the submodules
      scripts/checkout_submodules.py --shallow --platform linux

  zap:
    plugin: nil
    build-environment:
      - ZAP_VERSION: v2024.03.16-nightly
    build-packages:
      - wget
      - unzip
    override-build: |

      if [[ $SNAP_ARCH == "arm64" ]]; then
        # Download and unzip the prebuilt ZAP (Zigbee Cluster Library configuration tool and generator) binary for the ARM64 architecture
        wget --no-verbose https://github.com/project-chip/zap/releases/download/$ZAP_VERSION/zap-linux-$SNAP_ARCH.zip
        unzip -o zap-linux-$SNAP_ARCH.zip

        # Define the environment needed for the app build
        echo "export ZAP_INSTALL_PATH=$PWD" >> env
      fi

  lighting:
    after: [libgpiod, test-blink, connectedhomeip, zap]
    plugin: nil
    source: app
    build-environment:
      - ZAP_ENV: ../../zap/build/env
    override-build: |

      export MATTER_SDK_PATH=../../connectedhomeip
      MATTER_SDK_PATH=../../connectedhomeip

      cp $CRAFT_STAGE/gpiod.h linux/include 

      # Setup ZAP paths; installed in the corresponding part
      test -f $ZAP_ENV && source $ZAP_ENV
      
      # Change to SDK's directory to allow caching of the activation
      # regardless of this part's pull and build status.
      cd ../../connectedhomeip/src

      # The project writes its data to /tmp which isn't persisted.
      #
      # There is currently has no known way of overriding the default paths to
      #   both storage and security config files.
      #
      # Snap does not allow bind-mounting a persistent directory on /tmp, 
      #  so we need to first replace it in the source with another path, i.e. /mnt.
      # See the top-level layout definition which bind-mounts a persisted
      #   directory within the confined snap space on /mnt.
      #
      # Replace storage paths:
      sed -i 's/\/tmp/\/mnt/g' src/platform/Linux/CHIPLinuxStorage.h
      # Replace key-value store path:
      sed -i 's/\/tmp/\/mnt/g' src/platform/Linux/CHIPPlatformConfig.h

      cd $CRAFT_PART_BUILD
      cd ../../connectedhomeip/src
      pwd

      ls -la

      cd $CRAFT_PART_BUILD/linux
      pwd

      ln -s ../../../connectedhomeip/src/build_overrides build_overrides
      if [[ ! -z build_overrides ]]; then
        echo "build_overrides exists"
      else
        echo "build_overrides does not exist"
        ln -s ../../connectedhomeip/src/build_overrides build_overrides
      fi
      ls -l ../../
      ls -l ../../../connectedhomeip


      echo "[build_overrides] Detecting link integrity..."
      find . -type l ! -exec test -e {} \; -print

      cd third_party
      echo -e "\n\n\n\n\n\n"
      ls ../../../.. 
      echo -e "\n\n\n\n\n\n"
      ln -s ../../../../connectedhomeip connectedhomeip


      if [[ ! -z connectedhomeip ]]; then
        echo "connectedhomeip exists"
      else
        echo "connectedhomeip does not exist"
        ln -s ../../../../connectedhomeip connectedhomeip
      fi
      cd ..

      pwd
      ls -la
      ls -l third_party

      echo "[third_party] Detecting link integrity..."
      find third_party -type l ! -exec test -e {} \; -print

      pwd
      ls -la third_party/connectedhomeip/src

      cd $CRAFT_PART_BUILD
      cd ../../connectedhomeip/src

      echo -e "\n\n\n\n\n\n\n"

      # To avoid unrelated activation errors, don't treat unset variables as error
      set +u
      source scripts/activate.sh
      set -u

      cd $CRAFT_PART_BUILD/linux
      # Copy and replace the application files
      # cp -vr $CRAFT_PART_BUILD/lighting-common/* examples/lighting-app/lighting-common/
      # cp -vr $CRAFT_PART_BUILD/linux/* examples/lighting-app/linux
      echo -e "\n\n\n\n\n\n\n"
      # cd examples/lighting-app/linux
      ls -la /root/parts/connectedhomeip
      ls -la /root/parts/connectedhomeip/build
      ls -la /root/parts/connectedhomeip/build/build_overrides
      ls -la /root/parts/connectedhomeip/src

      echo -e "\n\n\n\n\n\n\n"
      gn gen out/build
      ninja -C out/build

      ldd out/build/chip-lighting-app
      
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp out/build/chip-lighting-app $CRAFT_PART_INSTALL/bin/lighting-app        
    build-packages:
      - git
      - gcc
      - g++
      - pkg-config
      - libssl-dev
      - libdbus-1-dev
      - libglib2.0-dev
      - libavahi-client-dev
      - ninja-build
      - python3-venv
      - python3-dev
      - python3-pip
      - libgirepository1.0-dev
      - libcairo2-dev
      - libreadline-dev
      - generate-ninja
      - libgpiod-dev 

  local-bin:
    plugin: nil
    source: snap/local/bin/
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp -v run.sh $CRAFT_PART_INSTALL/bin/
      cp -v load-snap-options.sh $CRAFT_PART_INSTALL/bin/

apps:
  lighting:
    daemon: simple
    command-chain:
      - bin/load-snap-options.sh
    command: bin/run.sh
    install-mode: disable
    plugs:
      - network
      - network-bind
      - bluez
      - avahi-control
      - custom-gpio
      - otbr-dbus-wpan0

  help:
    command: bin/lighting-app -h

  # This app is to test the GPIO control without using a Matter controller
  test-blink:
    command-chain:
      - bin/load-snap-options.sh
    command: bin/test-blink
    plugs:
      - custom-gpio
